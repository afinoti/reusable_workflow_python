name: "Terraform"

on:
  workflow_call:
    inputs:
      environment:
        description: "Environment"
        required: false
        default: "dev"
        type: string
      iac_folder_path:
        description: "IAC Folder Path"
        required: false
        default: "IAC"
        type: string
      tf_workspace:
        description: "Workspace"
        required: false
        default: "default"
        type: string
    secrets:
      TF_API_TOKEN:
        description: "Terraform Cloud API Token"
        required: true
env:
  TF_WORKSPACE: "${{ inputs.tf_workspace }}"

jobs:

  debug:
    if: runner.debug == '1'
    name: Debug
    runs-on: ubuntu-latest
    steps:
      - name: Parse inputs
        run: echo "${{ toJSON(inputs) }}"
      - name: Parse env
        run: echo "${{ toJSON(env) }}"
      - name: Parse context 
        run: echo "${{ toJSON(github) }}"     
      - name: Parse payload  
        run: echo ${{ github.event.client_payload.body }}
          
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.iac_folder_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.3.2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check 

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var-file="tfvars/${{ inputs.environment }}.tfvars"
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file="tfvars/${{ inputs.environment }}.tfvars"
